import { AppService } from "./app.service";
import { InjectBot, Start, Update, Action, Hears, On, Message, Ctx, Command } from "nestjs-telegraf";
import { Context, Scenes, Telegraf } from "telegraf";
import { actionButtons, myConnectsButton, statusButton } from "./bot.buttons";
import { UserService } from "src/user/user.service";
import { ConnectionsService } from "src/connections/connections.service";
import { MonitoringService } from "src/monitoring/monitoring.service";
import axios from "axios";
import { similarity } from "src/common/voice-similarity";
import { BotService } from "./bot.service";
import { Logger } from "@nestjs/common";

@Update()
export class BotUpdate {
  private readonly logger = new Logger(BotUpdate.name);

  constructor(@InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
    private readonly usersService: UserService,
    private readonly connectionsService: ConnectionsService,
    private readonly monitoringService: MonitoringService,
    private readonly botService: BotService,

  ) { }

  @Start()
  async startCommand(ctx: Context) {
    const telegram_id = String(ctx.from.id);
    const telegram_chat_id = String(ctx.chat.id);

    const user = await this.usersService.create({ telegram_id, telegram_chat_id });

    ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.username}!`, statusButton());
    const userConnections = await this.usersService.findAllUserConnections(telegram_id);

    if (userConnections.length > 0) {

      await ctx.reply('–ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', myConnectsButton(userConnections))
    }
    else {
      await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ', actionButtons());
    }
  }

  @Command('connect')
  async connect(ctx: Scenes.SceneContext) {
    this.logger.debug('Trying to enter the connectionWizard scene');
    await ctx.scene.enter('connectionWizard');
  }

  @Command('voicehelp')
  @Command('–≥–æ–ª–æ—Å')
  @Hears('üí¨ –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥')
  async sendVoiceHelp(@Ctx() ctx: Context) {
    let helpText = `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n`;
    helpText += this.voicecommands.map((command) => `- *${command.command}* - ${command.description}`).join(`\n`);
    await ctx.replyWithMarkdown(helpText);
  }

  @Command('–ø–æ–º–æ—â—å')
  @Command('help')
  @Hears('üò± –ü–æ–º–æ—â—å')
  async sendHelp(@Ctx() ctx: Context) {
    let helpText = `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n`;
    helpText += this.commands.map((command) => `*/${command.command}* - ${command.description}`).join(`\n`);
    await ctx.replyWithMarkdown(helpText);

  }

  @Command('about')
  async aboutUs(@Ctx() ctx: Context) {
    await ctx.reply(
      '–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π \"34. –°–±–æ—Ä–Ω–∞—è –û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ ‚Ññ1\".\n' +
      '–ù–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º —Ä–∞–±–æ—Ç–∞–ª–∏: Exem, RGN, SunDust, Airi –∏ Dane4ka \n ' +
      '–û–Ω–∏ –∂–µ –°–¢–ê–° ‚≠êÔ∏è - \"–∞–π, –∫–∞–∫ —Å–ª–æ–∂–Ω–æ\"'
    );
    await ctx.replyWithMarkdown(
      '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏:\n'
    );
    await ctx.replyWithContact("+79058188101", "–Æ–ª–∏—è");
    await ctx.replyWithMarkdown(
      '–∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ [GitHub –ø—Ä–æ–µ–∫—Ç–∞ - –ë–æ—Ç](https://github.com/RGNGIT/ultimate-hahaton-base)\n'
    );
    await ctx.replyWithMarkdown(
      '[GitHub –ø—Ä–æ–µ–∫—Ç–∞ - WebApp](https://github.com/exem1337/stas-monitor-bot)\n'
    );
  }


  @Hears('üìù –ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
  async myConnections(ctx: Context) {
    const conns = await this.usersService.findAllUserConnections(String(ctx.from.id));
    if (conns.length > 0) {
      await ctx.reply('–ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', myConnectsButton(conns))
    }
    else {
      await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ', actionButtons());
    }
  }

  @Hears('‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')
  async createNewConnection(ctx: Scenes.SceneContext) {
    this.logger.debug('Trying to enter the connectionWizard scene');
    await ctx.scene.enter('connectionWizard');
  }


  // @Hears('üìà –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å')
  // async getAllHears(ctx: Context) {
  //   const credString = await this.monitoringService.getPostgreCredsByTgId(1111);
  //   const { host, port, username, password } = this.monitoringService.splitCreds(credString);

  //   let partMetricsReport = await this.monitoringService.getDatabasesReport(host, port, username, password);

  //   await ctx.reply(JSON.stringify(partMetricsReport));

  // }

  @Action(/command_(.+)/)
  async onConnectionSelectAction(@Ctx() ctx) {
    console.log(ctx.match[1])
    const connectionId = ctx.match[1];

    const conn = await this.connectionsService.getOne(+connectionId);
    // // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    await ctx.scene.enter('command_sql_scene', { connection: conn });
  }

  @Hears('‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
  @Action('SSH_command')
  async executeSSH(ctx: Scenes.SceneContext) {
    this.logger.debug('Trying to enter the command_ssh_scene scene');
    await ctx.scene.enter('command_ssh_scene');
  }


  @Action('upload_doc')
  async executeUploadKey(ctx: Scenes.SceneContext) {
    // ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –≤–∏–¥–µ: host;port;username;password');
    this.logger.debug('Trying to enter the connection scene');
    await ctx.scene.enter('my_scene');
  }


  @On('text')
  async getText(@Message() message: any, @Ctx() ctx: Context) {
    if (message.reply_to_message && message.reply_to_message.text.includes('–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')) {
      const result = this.botService.parseConnectionString(message.text, ctx.from.id.toString());
      if (result) ctx.reply("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!");
      else ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!");
    }
  }

  @On('document')
  async getFiles(@Message() message: any, @Ctx() ctx: Context) {
    if (message.reply_to_message && message.reply_to_message.text.includes('–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')) {

      const fileId = message.document.file_id;
      const fileLink = await ctx.telegram.getFileLink(fileId);
      const response = await axios({
        method: 'GET',
        url: fileLink.toString(),
        responseType: 'stream'
      });

      const reader = response.data;
      let data = '';
      reader.on('data', (chunk) => {
        data += chunk.toString(); // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Buffer –≤ —Å—Ç—Ä–æ–∫—É
      });

      reader.on('end', () => {
        // –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á—Ç–µ–Ω–∏—è
        ctx.reply('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        // –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤–∞–º –Ω—É–∂–Ω–æ
        this.botService.parseConnectionString(data, ctx.from.id.toString());

        ctx.reply("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!");
      });

      reader.on('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.');
      });

    }
  }


  @On('voice')
  async getVoice(@Message('voice') message: any, @Ctx() ctx: Context) {
    try {
      const voice = message;
      const fileId = voice.file_id;
      // const fileDetails = await ctx.telegram.getFile(fileId);
      const fileLink = await ctx.telegram.getFileLink(fileId);

      let blob = await fetch(fileLink.toString()).then(r => r.blob());
      var formData = new FormData();
      formData.append('file', blob);

      this.logger.debug('Trying to get speech-to-text');

      const response = await axios.post('http://localhost:8000/speech-to-text/', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      const command = this.voicecommands.find(x => similarity(x.command, response.data.text) >= 0.90);

      switch (command?.command) {
        case "–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ":
          // case "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ":
          // case "–ü–æ–¥–∫–ª—é—á–∏—Å—å":
          // case "–ü–æ–¥–∫–ª—é—á–∏ –±–∞–∑—É":
          ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –≤–∏–¥–µ: host;port;username;password');
          break;
        case "–ü–æ–º–æ—â—å":
          break;
        case "–ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è":
          // case "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è":
          const conns = await this.usersService.findAllUserConnections(String(ctx.from.id));
          if (conns.length > 0) {
            await ctx.reply('–ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', myConnectsButton(conns))
          }
          else {
            await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ', actionButtons());
          }
          break;
        default:
          ctx.reply(`–ö–∞–∂–µ—Ç—Å—è, –í—ã —Å–∫–∞–∑–∞–ª–∏: \"${response.data.text}\"`);
      }
    } catch (error) {
      console.error('Error processing voice message:', error);
      ctx.reply('Sorry, I could not process your voice message.');
    }
  }

  voicecommands = [
    {
      command: "–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
      description: "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
    },
    {
      command: "–ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
      description: "–í—ã–≤–µ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
    },
    {
      command: "–ü–æ–º–æ—â—å",
      description: "–û–∫–æ—à–∫–æ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏",
    },
  ]

  commands = [
    {
      command: "start",
      description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
    },
    {
      command: "help",
      description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É",
    },
    {
      command: "cancel",
      description: "–û—Ç–º–µ–Ω–∞",
    },
    {
      command: "about",
      description: "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö",
    },
  ];

}

